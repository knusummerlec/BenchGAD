/*
 * Purpose : BecnPanel
 *  Author : mwJeong
 */
package Interface;

import Data.IconList;
import Data.IconListRenderer;
import Data.IconNode;
import Data.IconNodeRenderer;
import java.awt.Cursor;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.Hashtable;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.tree.TreePath;

public class MainPanel extends javax.swing.JPanel {
    
    /* Constant and  Variable declare */
    /* Data-Intensive System values */
    public String[] dbms = {"Data-Intensive Systems",                   // 0
                                "Relational Database Manager System",   // 1
                                    "MySQL",                            // 2
                                    "MSSQL Server",                     // 3
                                    "Oracle",                           // 4
                                "GPU-Based Data System",                // 5
                                    "MapD",                             // 6
                                    "PostgreSQL"                        // 7
                            };
    private IconNode[] nodes = new IconNode[dbms.length];
    public final int TREE_HEIGHT = 3;
    public final int RDBMS       = 1;
    public final int RDBMS_START = 2;
    public final int RDBMS_END   = 4;
    public final int GPU_BASED   = 5;
    public final int GPU_BASED_START = 6;
    public final int GPU_BASED_END   = 7;
    public final int LEAF_NODE_COUNT = 5;
    
    private IconList[] lists = new IconList[LEAF_NODE_COUNT];
    DefaultListModel selected_model = new DefaultListModel();
    private int SELECTED_IDX = 0;
    
    /* sample query value */
    private JCheckBox[] sample_checks = new JCheckBox[22];
    public final String[] SAMPLE = new String[22];
    

    public MainPanel() {
        Node_setting();
        initComponents();
        Sample_setting();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title_Panel = new javax.swing.JPanel();
        title_Label = new javax.swing.JLabel();
        back_Panel = new javax.swing.JPanel();
        select_Panel = new javax.swing.JPanel();
        select_title_Panel = new javax.swing.JPanel();
        selet_title_Label = new javax.swing.JLabel();
        select_Scroll = new javax.swing.JScrollPane();
        db_Tree = new javax.swing.JTree(nodes[0]);
        selected_Scroll = new javax.swing.JScrollPane();
        selected_List = new javax.swing.JList<>();
        sample_Panel = new javax.swing.JPanel();
        sample_title_Panel = new javax.swing.JPanel();
        sample_title_Label = new javax.swing.JLabel();
        sample_Scroll = new javax.swing.JScrollPane();
        sample_choose_Panel = new javax.swing.JPanel();
        select_all_Label = new javax.swing.JLabel();
        select_all_Check = new javax.swing.JCheckBox();
        query1_Label = new javax.swing.JLabel();
        query1_Check = new javax.swing.JCheckBox();
        query2_Label = new javax.swing.JLabel();
        query2_Check = new javax.swing.JCheckBox();
        query3_Label = new javax.swing.JLabel();
        query3_Check = new javax.swing.JCheckBox();
        query4_Label = new javax.swing.JLabel();
        query4_Check = new javax.swing.JCheckBox();
        query5_Label = new javax.swing.JLabel();
        query5_Check = new javax.swing.JCheckBox();
        query6_Label = new javax.swing.JLabel();
        query6_Check = new javax.swing.JCheckBox();
        query7_Label = new javax.swing.JLabel();
        query7_Check = new javax.swing.JCheckBox();
        query8_Label = new javax.swing.JLabel();
        query8_Check = new javax.swing.JCheckBox();
        query9_Label = new javax.swing.JLabel();
        query9_Check = new javax.swing.JCheckBox();
        query10_Label = new javax.swing.JLabel();
        query10_Check = new javax.swing.JCheckBox();
        query11_Label = new javax.swing.JLabel();
        query11_Check = new javax.swing.JCheckBox();
        query12_Label = new javax.swing.JLabel();
        query12_Check = new javax.swing.JCheckBox();
        query13_Label = new javax.swing.JLabel();
        query13_Check = new javax.swing.JCheckBox();
        query14_Label = new javax.swing.JLabel();
        query14_Check = new javax.swing.JCheckBox();
        query15_Label = new javax.swing.JLabel();
        query15_Check = new javax.swing.JCheckBox();
        query16_Label = new javax.swing.JLabel();
        query16_Check = new javax.swing.JCheckBox();
        query17_Label = new javax.swing.JLabel();
        query17_Check = new javax.swing.JCheckBox();
        query18_Label = new javax.swing.JLabel();
        query18_Check = new javax.swing.JCheckBox();
        query19_Label = new javax.swing.JLabel();
        query19_Check = new javax.swing.JCheckBox();
        query20_Label = new javax.swing.JLabel();
        query20_Check = new javax.swing.JCheckBox();
        query21_Label = new javax.swing.JLabel();
        query21_Check = new javax.swing.JCheckBox();
        query22_Label = new javax.swing.JLabel();
        query22_Check = new javax.swing.JCheckBox();
        input_Panel = new javax.swing.JPanel();
        input_title_Panel = new javax.swing.JPanel();
        input_title_Label = new javax.swing.JLabel();
        text_load_Btn = new javax.swing.JButton();
        input_Scroll = new javax.swing.JScrollPane();
        input_Area = new javax.swing.JTextArea();
        status_Scroll = new javax.swing.JScrollPane();
        status_Area = new javax.swing.JTextArea();

        setBounds(new java.awt.Rectangle(0, 0, 1150, 656));
        setPreferredSize(new java.awt.Dimension(1150, 656));

        title_Panel.setBackground(new java.awt.Color(0, 18, 50));
        title_Panel.setPreferredSize(new java.awt.Dimension(1150, 70));
        title_Panel.setSize(new java.awt.Dimension(1150, 70));

        title_Label.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        title_Label.setForeground(new java.awt.Color(255, 204, 0));
        title_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title_Label.setText("BenchGAD");

        javax.swing.GroupLayout title_PanelLayout = new javax.swing.GroupLayout(title_Panel);
        title_Panel.setLayout(title_PanelLayout);
        title_PanelLayout.setHorizontalGroup(
            title_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, title_PanelLayout.createSequentialGroup()
                .addGap(400, 400, 400)
                .addComponent(title_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        title_PanelLayout.setVerticalGroup(
            title_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, title_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                .addContainerGap())
        );

        back_Panel.setBackground(new java.awt.Color(35, 58, 98));
        back_Panel.setBounds(new java.awt.Rectangle(0, 0, 1150, 586));
        back_Panel.setMinimumSize(new java.awt.Dimension(1150, 586));
        back_Panel.setPreferredSize(new java.awt.Dimension(1150, 586));
        back_Panel.setRequestFocusEnabled(false);

        select_Panel.setBackground(new java.awt.Color(35, 58, 98));

        select_title_Panel.setBackground(new java.awt.Color(255, 204, 0));

        selet_title_Label.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        selet_title_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        selet_title_Label.setText("Select Data-Intensive System");

        javax.swing.GroupLayout select_title_PanelLayout = new javax.swing.GroupLayout(select_title_Panel);
        select_title_Panel.setLayout(select_title_PanelLayout);
        select_title_PanelLayout.setHorizontalGroup(
            select_title_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, select_title_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selet_title_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        select_title_PanelLayout.setVerticalGroup(
            select_title_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(select_title_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selet_title_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addContainerGap())
        );

        db_Tree.putClientProperty("JTree.icons", makeIcons());
        db_Tree.setCellRenderer(new IconNodeRenderer());
        db_Tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                db_TreeMouseClicked(evt);
            }
        });
        select_Scroll.setViewportView(db_Tree);

        selected_List.setModel(selected_model);
        selected_List.setCellRenderer(new IconListRenderer());
        selected_List.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selected_ListMouseClicked(evt);
            }
        });
        selected_Scroll.setViewportView(selected_List);

        javax.swing.GroupLayout select_PanelLayout = new javax.swing.GroupLayout(select_Panel);
        select_Panel.setLayout(select_PanelLayout);
        select_PanelLayout.setHorizontalGroup(
            select_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(select_title_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(select_Scroll)
            .addComponent(selected_Scroll)
        );
        select_PanelLayout.setVerticalGroup(
            select_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(select_PanelLayout.createSequentialGroup()
                .addComponent(select_title_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(select_Scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(selected_Scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
        );

        sample_title_Panel.setBackground(new java.awt.Color(255, 204, 0));

        sample_title_Label.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        sample_title_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sample_title_Label.setText("Sample-Query");

        javax.swing.GroupLayout sample_title_PanelLayout = new javax.swing.GroupLayout(sample_title_Panel);
        sample_title_Panel.setLayout(sample_title_PanelLayout);
        sample_title_PanelLayout.setHorizontalGroup(
            sample_title_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sample_title_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sample_title_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        sample_title_PanelLayout.setVerticalGroup(
            sample_title_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sample_title_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sample_title_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addContainerGap())
        );

        sample_choose_Panel.setBackground(new java.awt.Color(0, 18, 50));

        select_all_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        select_all_Label.setForeground(new java.awt.Color(255, 204, 0));
        select_all_Label.setText("Select All");

        select_all_Check.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                select_all_CheckStateChanged(evt);
            }
        });

        query1_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query1_Label.setForeground(new java.awt.Color(255, 204, 0));
        query1_Label.setText("Query1");
        query1_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query1_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query1_LabelMouseEntered(evt);
            }
        });

        query2_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query2_Label.setForeground(new java.awt.Color(255, 204, 0));
        query2_Label.setText("Query2");
        query2_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query2_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query2_LabelMouseEntered(evt);
            }
        });

        query3_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query3_Label.setForeground(new java.awt.Color(255, 204, 0));
        query3_Label.setText("Query3");
        query3_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query3_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query3_LabelMouseEntered(evt);
            }
        });

        query4_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query4_Label.setForeground(new java.awt.Color(255, 204, 0));
        query4_Label.setText("Query4");
        query4_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query4_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query4_LabelMouseEntered(evt);
            }
        });

        query5_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query5_Label.setForeground(new java.awt.Color(255, 204, 0));
        query5_Label.setText("Query5");
        query5_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query5_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query5_LabelMouseEntered(evt);
            }
        });

        query6_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query6_Label.setForeground(new java.awt.Color(255, 204, 0));
        query6_Label.setText("Query6");
        query6_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query6_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query6_LabelMouseEntered(evt);
            }
        });

        query7_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query7_Label.setForeground(new java.awt.Color(255, 204, 0));
        query7_Label.setText("Query7");
        query7_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query7_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query7_LabelMouseEntered(evt);
            }
        });

        query8_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query8_Label.setForeground(new java.awt.Color(255, 204, 0));
        query8_Label.setText("Query8");
        query8_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query8_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query8_LabelMouseEntered(evt);
            }
        });

        query9_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query9_Label.setForeground(new java.awt.Color(255, 204, 0));
        query9_Label.setText("Query9");
        query9_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query9_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query9_LabelMouseEntered(evt);
            }
        });

        query10_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query10_Label.setForeground(new java.awt.Color(255, 204, 0));
        query10_Label.setText("Query10");
        query10_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query10_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query10_LabelMouseEntered(evt);
            }
        });

        query11_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query11_Label.setForeground(new java.awt.Color(255, 204, 0));
        query11_Label.setText("Query11");
        query11_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query11_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query11_LabelMouseEntered(evt);
            }
        });

        query12_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query12_Label.setForeground(new java.awt.Color(255, 204, 0));
        query12_Label.setText("Query12");
        query12_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query12_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query12_LabelMouseEntered(evt);
            }
        });

        query13_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query13_Label.setForeground(new java.awt.Color(255, 204, 0));
        query13_Label.setText("Query13");
        query13_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query13_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query13_LabelMouseEntered(evt);
            }
        });

        query14_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query14_Label.setForeground(new java.awt.Color(255, 204, 0));
        query14_Label.setText("Query14");
        query14_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query14_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query14_LabelMouseEntered(evt);
            }
        });

        query15_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query15_Label.setForeground(new java.awt.Color(255, 204, 0));
        query15_Label.setText("Query15");
        query15_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query15_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query15_LabelMouseEntered(evt);
            }
        });

        query16_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query16_Label.setForeground(new java.awt.Color(255, 204, 0));
        query16_Label.setText("Query16");
        query16_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query16_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query16_LabelMouseEntered(evt);
            }
        });

        query17_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query17_Label.setForeground(new java.awt.Color(255, 204, 0));
        query17_Label.setText("Query17");
        query17_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query17_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query17_LabelMouseEntered(evt);
            }
        });

        query18_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query18_Label.setForeground(new java.awt.Color(255, 204, 0));
        query18_Label.setText("Query18");
        query18_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query18_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query18_LabelMouseEntered(evt);
            }
        });

        query19_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query19_Label.setForeground(new java.awt.Color(255, 204, 0));
        query19_Label.setText("Query19");
        query19_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query19_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query19_LabelMouseEntered(evt);
            }
        });

        query20_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query20_Label.setForeground(new java.awt.Color(255, 204, 0));
        query20_Label.setText("Query20");
        query20_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query20_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query20_LabelMouseEntered(evt);
            }
        });

        query21_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query21_Label.setForeground(new java.awt.Color(255, 204, 0));
        query21_Label.setText("Query21");
        query21_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query21_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query21_LabelMouseEntered(evt);
            }
        });

        query22_Label.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        query22_Label.setForeground(new java.awt.Color(255, 204, 0));
        query22_Label.setText("Query22");
        query22_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                query22_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                query22_LabelMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout sample_choose_PanelLayout = new javax.swing.GroupLayout(sample_choose_Panel);
        sample_choose_Panel.setLayout(sample_choose_PanelLayout);
        sample_choose_PanelLayout.setHorizontalGroup(
            sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sample_choose_PanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sample_choose_PanelLayout.createSequentialGroup()
                        .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(sample_choose_PanelLayout.createSequentialGroup()
                                .addComponent(query2_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(55, 55, 55))
                            .addGroup(sample_choose_PanelLayout.createSequentialGroup()
                                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(query1_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(select_all_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sample_choose_PanelLayout.createSequentialGroup()
                        .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(query16_Label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(query15_Label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(query14_Label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(query13_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(query12_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(query11_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(sample_choose_PanelLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(query12_Check)
                                    .addComponent(query13_Check)
                                    .addComponent(query15_Check)
                                    .addComponent(query16_Check)
                                    .addComponent(query14_Check)))
                            .addGroup(sample_choose_PanelLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(query11_Check)))
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sample_choose_PanelLayout.createSequentialGroup()
                        .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(query10_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(query9_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(query8_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(query5_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(query4_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(sample_choose_PanelLayout.createSequentialGroup()
                                .addComponent(query3_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(12, 12, 12))
                            .addComponent(query6_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(query7_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(sample_choose_PanelLayout.createSequentialGroup()
                                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(query2_Check)
                                    .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(select_all_Check, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(query1_Check, javax.swing.GroupLayout.Alignment.TRAILING)))
                                .addGap(1, 1, 1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sample_choose_PanelLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(query10_Check, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(query9_Check, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(query8_Check, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(query5_Check, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(query4_Check, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(query3_Check, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(query6_Check, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(query7_Check, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sample_choose_PanelLayout.createSequentialGroup()
                        .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(sample_choose_PanelLayout.createSequentialGroup()
                                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(query21_Label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(query20_Label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(query19_Label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(query18_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(query22_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(3, 3, 3))
                            .addGroup(sample_choose_PanelLayout.createSequentialGroup()
                                .addComponent(query17_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(4, 4, 4)))
                        .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(query17_Check)
                            .addComponent(query22_Check)
                            .addComponent(query21_Check)
                            .addComponent(query20_Check)
                            .addComponent(query19_Check)
                            .addComponent(query18_Check))
                        .addGap(17, 17, 17))))
        );
        sample_choose_PanelLayout.setVerticalGroup(
            sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sample_choose_PanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(sample_choose_PanelLayout.createSequentialGroup()
                        .addComponent(select_all_Label)
                        .addGap(19, 19, 19)
                        .addComponent(query1_Label)
                        .addGap(19, 19, 19)
                        .addComponent(query2_Label)
                        .addGap(19, 19, 19)
                        .addComponent(query3_Label)
                        .addGap(19, 19, 19)
                        .addComponent(query4_Label)
                        .addGap(19, 19, 19)
                        .addComponent(query5_Label)
                        .addGap(19, 19, 19)
                        .addComponent(query6_Label)
                        .addGap(19, 19, 19)
                        .addComponent(query7_Label)
                        .addGap(19, 19, 19)
                        .addComponent(query8_Label)
                        .addGap(19, 19, 19)
                        .addComponent(query9_Label)
                        .addGap(19, 19, 19)
                        .addComponent(query10_Label))
                    .addGroup(sample_choose_PanelLayout.createSequentialGroup()
                        .addComponent(select_all_Check)
                        .addGap(18, 18, 18)
                        .addComponent(query1_Check)
                        .addGap(18, 18, 18)
                        .addComponent(query2_Check)
                        .addGap(18, 18, 18)
                        .addComponent(query3_Check)
                        .addGap(18, 18, 18)
                        .addComponent(query4_Check)
                        .addGap(18, 18, 18)
                        .addComponent(query5_Check)
                        .addGap(18, 18, 18)
                        .addComponent(query6_Check)
                        .addGap(18, 18, 18)
                        .addComponent(query7_Check)
                        .addGap(18, 18, 18)
                        .addComponent(query8_Check)
                        .addGap(18, 18, 18)
                        .addComponent(query9_Check)
                        .addGap(18, 18, 18)
                        .addComponent(query10_Check)))
                .addGap(19, 19, 19)
                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(query11_Label)
                    .addComponent(query11_Check))
                .addGap(18, 18, 18)
                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(query12_Label)
                    .addComponent(query12_Check))
                .addGap(19, 19, 19)
                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(query13_Label)
                    .addComponent(query13_Check))
                .addGap(19, 19, 19)
                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(query14_Label)
                    .addComponent(query14_Check))
                .addGap(19, 19, 19)
                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(query15_Label)
                    .addComponent(query15_Check))
                .addGap(18, 18, 18)
                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(query16_Label)
                    .addComponent(query16_Check))
                .addGap(19, 19, 19)
                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(query17_Label)
                    .addComponent(query17_Check))
                .addGap(18, 18, 18)
                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(query18_Label)
                    .addComponent(query18_Check))
                .addGap(19, 19, 19)
                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(query19_Label)
                    .addComponent(query19_Check))
                .addGap(18, 18, 18)
                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(query20_Label)
                    .addComponent(query20_Check))
                .addGap(18, 18, 18)
                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(query21_Label)
                    .addComponent(query21_Check))
                .addGap(18, 18, 18)
                .addGroup(sample_choose_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(query22_Label)
                    .addComponent(query22_Check))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        sample_Scroll.setViewportView(sample_choose_Panel);

        javax.swing.GroupLayout sample_PanelLayout = new javax.swing.GroupLayout(sample_Panel);
        sample_Panel.setLayout(sample_PanelLayout);
        sample_PanelLayout.setHorizontalGroup(
            sample_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sample_title_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sample_Scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );
        sample_PanelLayout.setVerticalGroup(
            sample_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sample_PanelLayout.createSequentialGroup()
                .addComponent(sample_title_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(sample_Scroll))
        );

        input_Panel.setBackground(new java.awt.Color(35, 58, 98));

        input_title_Panel.setBackground(new java.awt.Color(255, 204, 0));

        input_title_Label.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        input_title_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        input_title_Label.setText("Provide Input directly or by text file");

        text_load_Btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/load.png"))); // NOI18N

        javax.swing.GroupLayout input_title_PanelLayout = new javax.swing.GroupLayout(input_title_Panel);
        input_title_Panel.setLayout(input_title_PanelLayout);
        input_title_PanelLayout.setHorizontalGroup(
            input_title_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(input_title_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(input_title_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(text_load_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        input_title_PanelLayout.setVerticalGroup(
            input_title_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, input_title_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(input_title_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(text_load_Btn, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        input_Area.setColumns(20);
        input_Area.setRows(5);
        input_Scroll.setViewportView(input_Area);

        status_Area.setEditable(false);
        status_Area.setColumns(20);
        status_Area.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        status_Area.setRows(5);
        status_Scroll.setViewportView(status_Area);

        javax.swing.GroupLayout input_PanelLayout = new javax.swing.GroupLayout(input_Panel);
        input_Panel.setLayout(input_PanelLayout);
        input_PanelLayout.setHorizontalGroup(
            input_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(input_title_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(input_Scroll)
            .addComponent(status_Scroll)
        );
        input_PanelLayout.setVerticalGroup(
            input_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(input_PanelLayout.createSequentialGroup()
                .addComponent(input_title_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(input_Scroll)
                .addGap(18, 18, 18)
                .addComponent(status_Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout back_PanelLayout = new javax.swing.GroupLayout(back_Panel);
        back_Panel.setLayout(back_PanelLayout);
        back_PanelLayout.setHorizontalGroup(
            back_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(back_PanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(select_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85)
                .addComponent(sample_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95)
                .addComponent(input_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(58, 58, 58))
        );
        back_PanelLayout.setVerticalGroup(
            back_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, back_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(back_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(input_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sample_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(select_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(back_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(title_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(title_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(back_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    public String getInput() {
        return input_Area.getText();
    }
    
    /*
     * Purpose : Sample Query setting
     *  Author : mwJeong
    */
    private void Sample_setting() {
        for (int i = 0; i < 22; i++) {
           sample_checks[i] = new JCheckBox();
        }
        
        sample_checks[0] = query1_Check;
        sample_checks[1] = query2_Check;
        sample_checks[2] = query3_Check;
        sample_checks[3] = query4_Check;
        sample_checks[4] = query5_Check;
        sample_checks[5] = query6_Check;
        sample_checks[6] = query7_Check;
        sample_checks[7] = query8_Check;
        sample_checks[8] = query9_Check;
        sample_checks[9] = query10_Check;
        sample_checks[10] = query11_Check;
        sample_checks[11] = query12_Check;
        sample_checks[12] = query13_Check;
        sample_checks[13] = query14_Check;
        sample_checks[14] = query15_Check;
        sample_checks[15] = query16_Check;
        sample_checks[16] = query17_Check;
        sample_checks[17] = query18_Check;
        sample_checks[18] = query19_Check;
        sample_checks[19] = query20_Check;
        sample_checks[20] = query21_Check;
        sample_checks[21] = query22_Check;
        
        /* sample query setting */
        SAMPLE[0] =     "select\n" +
                        "	l_returnflag,\n" +
                        "	l_linestatus,\n" +
                        "	sum(l_quantity) as sum_qty,\n" +
                        "	sum(l_extendedprice) as sum_base_price,\n" +
                        "	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,\n" +
                        "	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,\n" +
                        "	avg(l_quantity) as avg_qty,\n" +
                        "	avg(l_extendedprice) as avg_price,\n" +
                        "	avg(l_discount) as avg_disc,\n" +
                        "	count(*) as count_order\n" +
                        "from\n" +
                        "	lineitem\n" +
                        "where\n" +
                        "	l_shipdate <= '1998-09-16'\n" +
                        "group by\n" +
                        "	l_returnflag,\n" +
                        "	l_linestatus\n" +
                        "order by\n" +
                        "	l_returnflag,\n" +
                        "	l_linestatus;";
        SAMPLE[1] =     "drop view q2_min_ps_supplycost;\n" +
                        "create view q2_min_ps_supplycost as\n" +
                        "select\n" +
                        "	p_partkey as min_p_partkey,\n" +
                        "	min(ps_supplycost) as min_ps_supplycost\n" +
                        "from\n" +
                        "	part,\n" +
                        "	partsupp,\n" +
                        "	supplier,\n" +
                        "	nation,\n" +
                        "	region\n" +
                        "where\n" +
                        "	p_partkey = ps_partkey\n" +
                        "	and s_suppkey = ps_suppkey\n" +
                        "	and s_nationkey = n_nationkey\n" +
                        "	and n_regionkey = r_regionkey\n" +
                        "	and r_name = 'EUROPE'\n" +
                        "group by\n" +
                        "	p_partkey;\n" +
                        "\n" +
                        "select\n" +
                        "	s_acctbal,\n" +
                        "	s_name,\n" +
                        "	n_name,\n" +
                        "	p_partkey,\n" +
                        "	p_mfgr,\n" +
                        "	s_address,\n" +
                        "	s_phone,\n" +
                        "	s_comment\n" +
                        "from\n" +
                        "	part,\n" +
                        "	supplier,\n" +
                        "	partsupp,\n" +
                        "	nation,\n" +
                        "	region,\n" +
                        "	q2_min_ps_supplycost\n" +
                        "where\n" +
                        "	p_partkey = ps_partkey\n" +
                        "	and s_suppkey = ps_suppkey\n" +
                        "	and p_size = 37\n" +
                        "	and p_type like '%COPPER'\n" +
                        "	and s_nationkey = n_nationkey\n" +
                        "	and n_regionkey = r_regionkey\n" +
                        "	and r_name = 'EUROPE'\n" +
                        "	and ps_supplycost = min_ps_supplycost\n" +
                        "	and p_partkey = min_p_partkey\n" +
                        "order by\n" +
                        "	s_acctbal desc,\n" +
                        "	n_name,\n" +
                        "	s_name,\n" +
                        "	p_partkey\n" +
                        "limit 100;";
        
        SAMPLE[2] =     "select\n" +
                        "	l_orderkey,\n" +
                        "	sum(l_extendedprice * (1 - l_discount)) as revenue,\n" +
                        "	o_orderdate,\n" +
                        "	o_shippriority\n" +
                        "from\n" +
                        "	customer,\n" +
                        "	orders,\n" +
                        "	lineitem\n" +
                        "where\n" +
                        "	c_mktsegment = 'BUILDING'\n" +
                        "	and c_custkey = o_custkey\n" +
                        "	and l_orderkey = o_orderkey\n" +
                        "	and o_orderdate < '1995-03-22'\n" +
                        "	and l_shipdate > '1995-03-22'\n" +
                        "group by\n" +
                        "	l_orderkey,\n" +
                        "	o_orderdate,\n" +
                        "	o_shippriority\n" +
                        "order by\n" +
                        "	revenue desc,\n" +
                        "	o_orderdate\n" +
                        "limit 10;";
        
        SAMPLE[3] =     "select\n" +
                        "	o_orderpriority,\n" +
                        "	count(*) as order_count\n" +
                        "from\n" +
                        "	orders as o\n" +
                        "where\n" +
                        "	o_orderdate >= '1996-05-01'\n" +
                        "	and o_orderdate < '1996-08-01'\n" +
                        "	and exists (\n" +
                        "		select\n" +
                        "			*\n" +
                        "		from\n" +
                        "			lineitem\n" +
                        "		where\n" +
                        "			l_orderkey = o.o_orderkey\n" +
                        "			and l_commitdate < l_receiptdate\n" +
                        "	)\n" +
                        "group by\n" +
                        "	o_orderpriority\n" +
                        "order by\n" +
                        "	o_orderpriority;"; 
        
        SAMPLE[4] =     "select\n" +
                        "	n_name,\n" +
                        "	sum(l_extendedprice * (1 - l_discount)) as revenue\n" +
                        "from\n" +
                        "	customer,\n" +
                        "	orders,\n" +
                        "	lineitem,\n" +
                        "	supplier,\n" +
                        "	nation,\n" +
                        "	region\n" +
                        "where\n" +
                        "	c_custkey = o_custkey\n" +
                        "	and l_orderkey = o_orderkey\n" +
                        "	and l_suppkey = s_suppkey\n" +
                        "	and c_nationkey = s_nationkey\n" +
                        "	and s_nationkey = n_nationkey\n" +
                        "	and n_regionkey = r_regionkey\n" +
                        "	and r_name = 'AFRICA'\n" +
                        "	and o_orderdate >= '1993-01-01'\n" +
                        "	and o_orderdate < '1994-01-01'\n" +
                        "group by\n" +
                        "	n_name\n" +
                        "order by\n" +
                        "	revenue desc;";
        
        SAMPLE[5] =     "select\n" +
                        "	sum(l_extendedprice * l_discount) as revenue\n" +
                        "from\n" +
                        "	lineitem\n" +
                        "where\n" +
                        "	l_shipdate >= '1993-01-01'\n" +
                        "	and l_shipdate < '1994-01-01'\n" +
                        "	and l_discount between 0.06 - 0.01 and 0.06 + 0.01\n" +
                        "	and l_quantity < 25;";
        
        SAMPLE[6] =     "select\n" +
                        "	supp_nation,\n" +
                        "	cust_nation,\n" +
                        "	l_year,\n" +
                        "	sum(volume) as revenue\n" +
                        "from\n" +
                        "	(\n" +
                        "		select\n" +
                        "			n1.n_name as supp_nation,\n" +
                        "			n2.n_name as cust_nation,\n" +
                        "			year(l_shipdate) as l_year,\n" +
                        "			l_extendedprice * (1 - l_discount) as volume\n" +
                        "		from\n" +
                        "			supplier,\n" +
                        "			lineitem,\n" +
                        "			orders,\n" +
                        "			customer,\n" +
                        "			nation n1,\n" +
                        "			nation n2\n" +
                        "		where\n" +
                        "			s_suppkey = l_suppkey\n" +
                        "			and o_orderkey = l_orderkey\n" +
                        "			and c_custkey = o_custkey\n" +
                        "			and s_nationkey = n1.n_nationkey\n" +
                        "			and c_nationkey = n2.n_nationkey\n" +
                        "			and (\n" +
                        "				(n1.n_name = 'KENYA' and n2.n_name = 'PERU')\n" +
                        "				or (n1.n_name = 'PERU' and n2.n_name = 'KENYA')\n" +
                        "			)\n" +
                        "			and l_shipdate between '1995-01-01' and '1996-12-31'\n" +
                        "	) as shipping\n" +
                        "group by\n" +
                        "	supp_nation,\n" +
                        "	cust_nation,\n" +
                        "	l_year\n" +
                        "order by\n" +
                        "	supp_nation,\n" +
                        "	cust_nation,\n" +
                        "	l_year;";
        
        SAMPLE[7] =     "select\n" +
                        "	o_year,\n" +
                        "	sum(case\n" +
                        "		when nation = 'PERU' then volume\n" +
                        "		else 0\n" +
                        "	end) / sum(volume) as mkt_share\n" +
                        "from\n" +
                        "	(\n" +
                        "		select\n" +
                        "			year(o_orderdate) as o_year,\n" +
                        "			l_extendedprice * (1 - l_discount) as volume,\n" +
                        "			n2.n_name as nation\n" +
                        "		from\n" +
                        "			part,\n" +
                        "			supplier,\n" +
                        "			lineitem,\n" +
                        "			orders,\n" +
                        "			customer,\n" +
                        "			nation n1,\n" +
                        "			nation n2,\n" +
                        "			region\n" +
                        "		where\n" +
                        "			p_partkey = l_partkey\n" +
                        "			and s_suppkey = l_suppkey\n" +
                        "			and l_orderkey = o_orderkey\n" +
                        "			and o_custkey = c_custkey\n" +
                        "			and c_nationkey = n1.n_nationkey\n" +
                        "			and n1.n_regionkey = r_regionkey\n" +
                        "			and r_name = 'AMERICA'\n" +
                        "			and s_nationkey = n2.n_nationkey\n" +
                        "			and o_orderdate between '1995-01-01' and '1996-12-31'\n" +
                        "			and p_type = 'ECONOMY BURNISHED NICKEL'\n" +
                        "	) as all_nations\n" +
                        "group by\n" +
                        "	o_year\n" +
                        "order by\n" +
                        "	o_year;";
        
        SAMPLE[8] =     "select\n" +
                        "	nation,\n" +
                        "	o_year,\n" +
                        "	sum(amount) as sum_profit\n" +
                        "from\n" +
                        "	(\n" +
                        "		select\n" +
                        "			n_name as nation,\n" +
                        "			year(o_orderdate) as o_year,\n" +
                        "			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount\n" +
                        "		from\n" +
                        "			part,\n" +
                        "			supplier,\n" +
                        "			lineitem,\n" +
                        "			partsupp,\n" +
                        "			orders,\n" +
                        "			nation\n" +
                        "		where\n" +
                        "			s_suppkey = l_suppkey\n" +
                        "			and ps_suppkey = l_suppkey\n" +
                        "			and ps_partkey = l_partkey\n" +
                        "			and p_partkey = l_partkey\n" +
                        "			and o_orderkey = l_orderkey\n" +
                        "			and s_nationkey = n_nationkey\n" +
                        "			and p_name like '%plum%'\n" +
                        "	) as profit\n" +
                        "group by\n" +
                        "	nation,\n" +
                        "	o_year\n" +
                        "order by\n" +
                        "	nation,\n" +
                        "	o_year desc;";
        
        SAMPLE[9] =     "select\n" +
                        "	c_custkey,\n" +
                        "	c_name,\n" +
                        "	sum(l_extendedprice * (1 - l_discount)) as revenue,\n" +
                        "	c_acctbal,\n" +
                        "	n_name,\n" +
                        "	c_address,\n" +
                        "	c_phone,\n" +
                        "	c_comment\n" +
                        "from\n" +
                        "	customer,\n" +
                        "	orders,\n" +
                        "	lineitem,\n" +
                        "	nation\n" +
                        "where\n" +
                        "	c_custkey = o_custkey\n" +
                        "	and l_orderkey = o_orderkey\n" +
                        "	and o_orderdate >= '1993-07-01'\n" +
                        "	and o_orderdate < '1993-10-01'\n" +
                        "	and l_returnflag = 'R'\n" +
                        "	and c_nationkey = n_nationkey\n" +
                        "group by\n" +
                        "	c_custkey,\n" +
                        "	c_name,\n" +
                        "	c_acctbal,\n" +
                        "	c_phone,\n" +
                        "	n_name,\n" +
                        "	c_address,\n" +
                        "	c_comment\n" +
                        "order by\n" +
                        "	revenue desc\n" +
                        "limit 20;";
        
        SAMPLE[10] =    "drop view q11_part_tmp_cached;\n" +
                        "drop view q11_sum_tmp_cached;\n" +
                        "\n" +
                        "create view q11_part_tmp_cached as\n" +
                        "select\n" +
                        "	ps_partkey,\n" +
                        "	sum(ps_supplycost * ps_availqty) as part_value\n" +
                        "from\n" +
                        "	partsupp,\n" +
                        "	supplier,\n" +
                        "	nation\n" +
                        "where\n" +
                        "	ps_suppkey = s_suppkey\n" +
                        "	and s_nationkey = n_nationkey\n" +
                        "	and n_name = 'GERMANY'\n" +
                        "group by ps_partkey;\n" +
                        "\n" +
                        "create view q11_sum_tmp_cached as\n" +
                        "select\n" +
                        "	sum(part_value) as total_value\n" +
                        "from\n" +
                        "	q11_part_tmp_cached;\n" +
                        "\n" +
                        "select\n" +
                        "	ps_partkey, part_value as value\n" +
                        "from (\n" +
                        "	select\n" +
                        "		ps_partkey,\n" +
                        "		part_value,\n" +
                        "		total_value\n" +
                        "	from\n" +
                        "		q11_part_tmp_cached join q11_sum_tmp_cached\n" +
                        ") a\n" +
                        "where\n" +
                        "	part_value > total_value * 0.0001\n" +
                        "order by\n" +
                        "	value desc;";
        
        SAMPLE[11] =    "select\n" +
                        "	l_shipmode,\n" +
                        "	sum(case\n" +
                        "		when o_orderpriority = '1-URGENT'\n" +
                        "			or o_orderpriority = '2-HIGH'\n" +
                        "			then 1\n" +
                        "		else 0\n" +
                        "	end) as high_line_count,\n" +
                        "	sum(case\n" +
                        "		when o_orderpriority <> '1-URGENT'\n" +
                        "			and o_orderpriority <> '2-HIGH'\n" +
                        "			then 1\n" +
                        "		else 0\n" +
                        "	end) as low_line_count\n" +
                        "from\n" +
                        "	orders,\n" +
                        "	lineitem\n" +
                        "where\n" +
                        "	o_orderkey = l_orderkey\n" +
                        "	and l_shipmode in ('REG AIR', 'MAIL')\n" +
                        "	and l_commitdate < l_receiptdate\n" +
                        "	and l_shipdate < l_commitdate\n" +
                        "	and l_receiptdate >= '1995-01-01'\n" +
                        "	and l_receiptdate < '1996-01-01'\n" +
                        "group by\n" +
                        "	l_shipmode\n" +
                        "order by\n" +
                        "	l_shipmode;";
        
        SAMPLE[12] =    "select\n" +
                        "	c_count,\n" +
                        "	count(*) as custdist\n" +
                        "from\n" +
                        "	(\n" +
                        "		select\n" +
                        "			c_custkey,\n" +
                        "			count(o_orderkey) as c_count\n" +
                        "		from\n" +
                        "			customer left outer join orders on\n" +
                        "				c_custkey = o_custkey\n" +
                        "				and o_comment not like '%unusual%accounts%'\n" +
                        "		group by\n" +
                        "			c_custkey\n" +
                        "	) c_orders\n" +
                        "group by\n" +
                        "	c_count\n" +
                        "order by\n" +
                        "	custdist desc,\n" +
                        "	c_count desc;";
        
        SAMPLE[13] =    "select\n" +
                        "	100.00 * sum(case\n" +
                        "		when p_type like 'PROMO%'\n" +
                        "			then l_extendedprice * (1 - l_discount)\n" +
                        "		else 0\n" +
                        "	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue\n" +
                        "from\n" +
                        "	lineitem,\n" +
                        "	part\n" +
                        "where\n" +
                        "	l_partkey = p_partkey\n" +
                        "	and l_shipdate >= '1995-08-01'\n" +
                        "	and l_shipdate < '1995-09-01';";
        
        SAMPLE[14] =    "drop view revenue_cached;\n" +
                        "drop view max_revenue_cached;\n" +
                        "\n" +
                        "create view revenue_cached as\n" +
                        "select\n" +
                        "	l_suppkey as supplier_no,\n" +
                        "	sum(l_extendedprice * (1 - l_discount)) as total_revenue\n" +
                        "from\n" +
                        "	lineitem\n" +
                        "where\n" +
                        "	l_shipdate >= '1996-01-01'\n" +
                        "	and l_shipdate < '1996-04-01'\n" +
                        "group by l_suppkey;\n" +
                        "\n" +
                        "create view max_revenue_cached as\n" +
                        "select\n" +
                        "	max(total_revenue) as max_revenue\n" +
                        "from\n" +
                        "	revenue_cached;\n" +
                        "\n" +
                        "select\n" +
                        "	s_suppkey,\n" +
                        "	s_name,\n" +
                        "	s_address,\n" +
                        "	s_phone,\n" +
                        "	total_revenue\n" +
                        "from\n" +
                        "	supplier,\n" +
                        "	revenue_cached,\n" +
                        "	max_revenue_cached\n" +
                        "where\n" +
                        "	s_suppkey = supplier_no\n" +
                        "	and total_revenue = max_revenue \n" +
                        "order by s_suppkey;";
        
        SAMPLE[15] =    "select\n" +
                        "	p_brand,\n" +
                        "	p_type,\n" +
                        "	p_size,\n" +
                        "	count(distinct ps_suppkey) as supplier_cnt\n" +
                        "from\n" +
                        "	partsupp,\n" +
                        "	part\n" +
                        "where\n" +
                        "	p_partkey = ps_partkey\n" +
                        "	and p_brand <> 'Brand#34'\n" +
                        "	and p_type not like 'ECONOMY BRUSHED%'\n" +
                        "	and p_size in (22, 14, 27, 49, 21, 33, 35, 28)\n" +
                        "	and partsupp.ps_suppkey not in (\n" +
                        "		select\n" +
                        "			s_suppkey\n" +
                        "		from\n" +
                        "			supplier\n" +
                        "		where\n" +
                        "			s_comment like '%Customer%Complaints%'\n" +
                        "	)\n" +
                        "group by\n" +
                        "	p_brand,\n" +
                        "	p_type,\n" +
                        "	p_size\n" +
                        "order by\n" +
                        "	supplier_cnt desc,\n" +
                        "	p_brand,\n" +
                        "	p_type,\n" +
                        "	p_size;";
        
        SAMPLE[16] =    "drop view q17_lineitem_tmp_cached;\n" +
                        "\n" +
                        "create view q17_lineitem_tmp_cached as\n" +
                        "select\n" +
                        "	l_partkey as t_partkey,\n" +
                        "	0.2 * avg(l_quantity) as t_avg_quantity\n" +
                        "from\n" +
                        "	lineitem\n" +
                        "group by l_partkey;\n" +
                        "\n" +
                        "select\n" +
                        "	sum(l_extendedprice) / 7.0 as avg_yearly\n" +
                        "from (\n" +
                        "	select\n" +
                        "		l_quantity,\n" +
                        "		l_extendedprice,\n" +
                        "		t_avg_quantity\n" +
                        "	from\n" +
                        "		q17_lineitem_tmp_cached join\n" +
                        "		(select\n" +
                        "			l_quantity,\n" +
                        "			l_partkey,\n" +
                        "			l_extendedprice\n" +
                        "		from\n" +
                        "			part,\n" +
                        "			lineitem\n" +
                        "		where\n" +
                        "			p_partkey = l_partkey\n" +
                        "			and p_brand = 'Brand#23'\n" +
                        "			and p_container = 'MED BOX'\n" +
                        "		) l1 on l1.l_partkey = t_partkey\n" +
                        ") a \n" +
                        "where l_quantity < t_avg_quantity;";
        
        SAMPLE[17] =    "drop view q18_tmp_cached;\n" +
                        "drop table q18_large_volume_customer_cached;\n" +
                        "\n" +
                        "create view q18_tmp_cached as\n" +
                        "select\n" +
                        "	l_orderkey,\n" +
                        "	sum(l_quantity) as t_sum_quantity\n" +
                        "from\n" +
                        "	lineitem\n" +
                        "where\n" +
                        "	l_orderkey is not null\n" +
                        "group by\n" +
                        "	l_orderkey;\n" +
                        "\n" +
                        "create table q18_large_volume_customer_cached as\n" +
                        "select\n" +
                        "	c_name,\n" +
                        "	c_custkey,\n" +
                        "	o_orderkey,\n" +
                        "	o_orderdate,\n" +
                        "	o_totalprice,\n" +
                        "	sum(l_quantity)\n" +
                        "from\n" +
                        "	customer,\n" +
                        "	orders,\n" +
                        "	q18_tmp_cached t,\n" +
                        "	lineitem l\n" +
                        "where\n" +
                        "	c_custkey = o_custkey\n" +
                        "	and o_orderkey = t.l_orderkey\n" +
                        "	and o_orderkey is not null\n" +
                        "	and t.t_sum_quantity > 300\n" +
                        "	and o_orderkey = l.l_orderkey\n" +
                        "	and l.l_orderkey is not null\n" +
                        "group by\n" +
                        "	c_name,\n" +
                        "	c_custkey,\n" +
                        "	o_orderkey,\n" +
                        "	o_orderdate,\n" +
                        "	o_totalprice\n" +
                        "order by\n" +
                        "	o_totalprice desc,\n" +
                        "	o_orderdate \n" +
                        "limit 100;";
        
        SAMPLE[18] =    "select\n" +
                        "	sum(l_extendedprice* (1 - l_discount)) as revenue\n" +
                        "from\n" +
                        "	lineitem,\n" +
                        "	part\n" +
                        "where\n" +
                        "	(\n" +
                        "		p_partkey = l_partkey\n" +
                        "		and p_brand = 'Brand#32'\n" +
                        "		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')\n" +
                        "		and l_quantity >= 7 and l_quantity <= 7 + 10\n" +
                        "		and p_size between 1 and 5\n" +
                        "		and l_shipmode in ('AIR', 'AIR REG')\n" +
                        "		and l_shipinstruct = 'DELIVER IN PERSON'\n" +
                        "	)\n" +
                        "	or\n" +
                        "	(\n" +
                        "		p_partkey = l_partkey\n" +
                        "		and p_brand = 'Brand#35'\n" +
                        "		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')\n" +
                        "		and l_quantity >= 15 and l_quantity <= 15 + 10\n" +
                        "		and p_size between 1 and 10\n" +
                        "		and l_shipmode in ('AIR', 'AIR REG')\n" +
                        "		and l_shipinstruct = 'DELIVER IN PERSON'\n" +
                        "	)\n" +
                        "	or\n" +
                        "	(\n" +
                        "		p_partkey = l_partkey\n" +
                        "		and p_brand = 'Brand#24'\n" +
                        "		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')\n" +
                        "		and l_quantity >= 26 and l_quantity <= 26 + 10\n" +
                        "		and p_size between 1 and 15\n" +
                        "		and l_shipmode in ('AIR', 'AIR REG')\n" +
                        "		and l_shipinstruct = 'DELIVER IN PERSON'\n" +
                        "	);";
        
        SAMPLE[19] =    "drop view q20_tmp1_cached;\n" +
                        "drop view q20_tmp2_cached;\n" +
                        "drop view q20_tmp3_cached;\n" +
                        "drop view q20_tmp4_cached;\n" +
                        "\n" +
                        "create view q20_tmp1_cached as\n" +
                        "select distinct p_partkey\n" +
                        "from\n" +
                        "	part\n" +
                        "where\n" +
                        "	p_name like 'forest%';\n" +
                        "\n" +
                        "create view q20_tmp2_cached as\n" +
                        "select\n" +
                        "	l_partkey,\n" +
                        "	l_suppkey,\n" +
                        "	0.5 * sum(l_quantity) as sum_quantity\n" +
                        "from\n" +
                        "	lineitem\n" +
                        "where\n" +
                        "	l_shipdate >= '1994-01-01'\n" +
                        "	and l_shipdate < '1995-01-01'\n" +
                        "group by l_partkey, l_suppkey;\n" +
                        "\n" +
                        "create view q20_tmp3_cached as\n" +
                        "select\n" +
                        "	ps_suppkey,\n" +
                        "	ps_availqty,\n" +
                        "	sum_quantity\n" +
                        "from\n" +
                        "	partsupp, q20_tmp1_cached, q20_tmp2_cached\n" +
                        "where\n" +
                        "	ps_partkey = p_partkey\n" +
                        "	and ps_partkey = l_partkey\n" +
                        "	and ps_suppkey = l_suppkey;\n" +
                        "\n" +
                        "create view q20_tmp4_cached as\n" +
                        "select\n" +
                        "	ps_suppkey\n" +
                        "from\n" +
                        "	q20_tmp3_cached\n" +
                        "where\n" +
                        "	ps_availqty > sum_quantity\n" +
                        "group by ps_suppkey;\n" +
                        "\n" +
                        "select\n" +
                        "	s_name,\n" +
                        "	s_address\n" +
                        "from\n" +
                        "	supplier,\n" +
                        "	nation,\n" +
                        "	q20_tmp4_cached\n" +
                        "where\n" +
                        "	s_nationkey = n_nationkey\n" +
                        "	and n_name = 'CANADA'\n" +
                        "	and s_suppkey = ps_suppkey\n" +
                        "order by s_name;"; 
        
        SAMPLE[20] =    "drop view q21_tmp1_cached;\n" +
                        "drop view q21_tmp2_cached;\n" +
                        "\n" +
                        "create view q21_tmp1_cached as\n" +
                        "select\n" +
                        "	l_orderkey,\n" +
                        "	count(distinct l_suppkey) as count_suppkey,\n" +
                        "	max(l_suppkey) as max_suppkey\n" +
                        "from\n" +
                        "	lineitem\n" +
                        "where\n" +
                        "	l_orderkey is not null\n" +
                        "group by\n" +
                        "	l_orderkey;\n" +
                        "\n" +
                        "create view q21_tmp2_cached as\n" +
                        "select\n" +
                        "	l_orderkey,\n" +
                        "	count(distinct l_suppkey) count_suppkey,\n" +
                        "	max(l_suppkey) as max_suppkey\n" +
                        "from\n" +
                        "	lineitem\n" +
                        "where\n" +
                        "	l_receiptdate > l_commitdate\n" +
                        "	and l_orderkey is not null\n" +
                        "group by\n" +
                        "	l_orderkey;\n" +
                        "\n" +
                        "select\n" +
                        "	s_name,\n" +
                        "	count(1) as numwait\n" +
                        "from (\n" +
                        "	select s_name from (\n" +
                        "		select\n" +
                        "			s_name,\n" +
                        "			t2.l_orderkey,\n" +
                        "			l_suppkey,\n" +
                        "			count_suppkey,\n" +
                        "			max_suppkey\n" +
                        "		from\n" +
                        "			q21_tmp2_cached t2 right outer join (\n" +
                        "			select\n" +
                        "				s_name,\n" +
                        "				l_orderkey,\n" +
                        "				l_suppkey from (\n" +
                        "				select\n" +
                        "					s_name,\n" +
                        "					t1.l_orderkey,\n" +
                        "					l_suppkey,\n" +
                        "					count_suppkey,\n" +
                        "					max_suppkey\n" +
                        "				from\n" +
                        "					q21_tmp1_cached t1 join (\n" +
                        "						select\n" +
                        "							s_name,\n" +
                        "							l_orderkey,\n" +
                        "							l_suppkey\n" +
                        "						from\n" +
                        "							orders o join (\n" +
                        "							select\n" +
                        "								s_name,\n" +
                        "								l_orderkey,\n" +
                        "								l_suppkey\n" +
                        "							from\n" +
                        "								nation n join supplier s\n" +
                        "							on\n" +
                        "								s.s_nationkey = n.n_nationkey\n" +
                        "								and n.n_name = 'SAUDI ARABIA'\n" +
                        "								join lineitem l\n" +
                        "							on\n" +
                        "								s.s_suppkey = l.l_suppkey\n" +
                        "							where\n" +
                        "								l.l_receiptdate > l.l_commitdate\n" +
                        "								and l.l_orderkey is not null\n" +
                        "						) l1 on o.o_orderkey = l1.l_orderkey and o.o_orderstatus = 'F'\n" +
                        "					) l2 on l2.l_orderkey = t1.l_orderkey\n" +
                        "				) a\n" +
                        "			where\n" +
                        "				(count_suppkey > 1)\n" +
                        "				or ((count_suppkey=1)\n" +
                        "				and (l_suppkey <> max_suppkey))\n" +
                        "		) l3 on l3.l_orderkey = t2.l_orderkey\n" +
                        "	) b\n" +
                        "	where\n" +
                        "		(count_suppkey is null)\n" +
                        "		or ((count_suppkey=1)\n" +
                        "		and (l_suppkey = max_suppkey))\n" +
                        ") c\n" +
                        "group by\n" +
                        "	s_name\n" +
                        "order by\n" +
                        "	numwait desc,\n" +
                        "	s_name \n" +
                        "limit 100;";
        
        SAMPLE[21] =    "drop view q22_customer_tmp_cached;\n" +
                        "drop view q22_customer_tmp1_cached;\n" +
                        "drop view q22_orders_tmp_cached;\n" +
                        "\n" +
                        "create view if not exists q22_customer_tmp_cached as\n" +
                        "select\n" +
                        "	c_acctbal,\n" +
                        "	c_custkey,\n" +
                        "	substr(c_phone, 1, 2) as cntrycode\n" +
                        "from\n" +
                        "	customer\n" +
                        "where\n" +
                        "	substr(c_phone, 1, 2) = '13' or\n" +
                        "	substr(c_phone, 1, 2) = '31' or\n" +
                        "	substr(c_phone, 1, 2) = '23' or\n" +
                        "	substr(c_phone, 1, 2) = '29' or\n" +
                        "	substr(c_phone, 1, 2) = '30' or\n" +
                        "	substr(c_phone, 1, 2) = '18' or\n" +
                        "	substr(c_phone, 1, 2) = '17';\n" +
                        " \n" +
                        "create view if not exists q22_customer_tmp1_cached as\n" +
                        "select\n" +
                        "	avg(c_acctbal) as avg_acctbal\n" +
                        "from\n" +
                        "	q22_customer_tmp_cached\n" +
                        "where\n" +
                        "	c_acctbal > 0.00;\n" +
                        "\n" +
                        "create view if not exists q22_orders_tmp_cached as\n" +
                        "select\n" +
                        "	o_custkey\n" +
                        "from\n" +
                        "	orders\n" +
                        "group by\n" +
                        "	o_custkey;\n" +
                        "\n" +
                        "select\n" +
                        "	cntrycode,\n" +
                        "	count(1) as numcust,\n" +
                        "	sum(c_acctbal) as totacctbal\n" +
                        "from (\n" +
                        "	select\n" +
                        "		cntrycode,\n" +
                        "		c_acctbal,\n" +
                        "		avg_acctbal\n" +
                        "	from\n" +
                        "		q22_customer_tmp1_cached ct1 join (\n" +
                        "			select\n" +
                        "				cntrycode,\n" +
                        "				c_acctbal\n" +
                        "			from\n" +
                        "				q22_orders_tmp_cached ot\n" +
                        "				right outer join q22_customer_tmp_cached ct\n" +
                        "				on ct.c_custkey = ot.o_custkey\n" +
                        "			where\n" +
                        "				o_custkey is null\n" +
                        "		) ct2\n" +
                        ") a\n" +
                        "where\n" +
                        "	c_acctbal > avg_acctbal\n" +
                        "group by\n" +
                        "	cntrycode\n" +
                        "order by\n" +
                        "	cntrycode;"; 
    }
        
    /* 
     * Purpose : If db_Tree's node is double-clicked, add it to selected_Tree
     *  Author : mwJeong
    */
    private void db_TreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_db_TreeMouseClicked
        TreePath selPath = db_Tree.getPathForLocation(evt.getX(), evt.getY());
        
        if (evt.getClickCount() == 2 && selPath != null && selPath.getPathCount() == TREE_HEIGHT) {
            
            Object selectNode = selPath.getLastPathComponent();
            
            add_selected(selectNode);
        }
    }//GEN-LAST:event_db_TreeMouseClicked

    /*
     * Purpose : If selected_List's node is double-clicked, delete from selected_LIst
    */
    private void selected_ListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selected_ListMouseClicked
        int selected_idx = selected_List.getSelectedIndex();
        
        if (evt.getClickCount() == 2 && selected_idx != -1) {
            selected_model.remove(selected_idx);
            SELECTED_IDX--;
        }
    }//GEN-LAST:event_selected_ListMouseClicked

    /* 
     * Purpose : (un)select sample query
     *  Author : mwJeong
    */
    private void select_all_CheckStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_select_all_CheckStateChanged
        if (select_all_Check.isSelected()) {
            for (int i = 0; i < 22; i++) {
                sample_checks[i].setSelected(true);
            }
        } else {
            for (int i = 0; i < 22; i++) {
                sample_checks[i].setSelected(false);
            }
        }
    }//GEN-LAST:event_select_all_CheckStateChanged

    private void query1_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query1_LabelMouseClicked
        input_Area.setText(SAMPLE[0]);
    }//GEN-LAST:event_query1_LabelMouseClicked

    private void query1_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query1_LabelMouseEntered
        query1_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query1_LabelMouseEntered

    private void query2_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query2_LabelMouseClicked
        input_Area.setText(SAMPLE[1]);
    }//GEN-LAST:event_query2_LabelMouseClicked

    private void query2_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query2_LabelMouseEntered
        query2_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query2_LabelMouseEntered

    private void query3_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query3_LabelMouseClicked
        input_Area.setText(SAMPLE[2]);
    }//GEN-LAST:event_query3_LabelMouseClicked

    private void query3_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query3_LabelMouseEntered
        query3_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query3_LabelMouseEntered

    private void query4_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query4_LabelMouseClicked
        input_Area.setText(SAMPLE[3]);
    }//GEN-LAST:event_query4_LabelMouseClicked

    private void query4_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query4_LabelMouseEntered
        query4_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query4_LabelMouseEntered

    private void query5_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query5_LabelMouseClicked
        input_Area.setText(SAMPLE[4]);
    }//GEN-LAST:event_query5_LabelMouseClicked

    private void query5_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query5_LabelMouseEntered
        query5_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query5_LabelMouseEntered

    private void query6_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query6_LabelMouseClicked
        input_Area.setText(SAMPLE[5]);
    }//GEN-LAST:event_query6_LabelMouseClicked

    private void query6_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query6_LabelMouseEntered
        query6_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query6_LabelMouseEntered

    private void query7_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query7_LabelMouseClicked
        input_Area.setText(SAMPLE[6]);
    }//GEN-LAST:event_query7_LabelMouseClicked

    private void query7_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query7_LabelMouseEntered
        query7_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query7_LabelMouseEntered

    private void query8_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query8_LabelMouseClicked
        input_Area.setText(SAMPLE[7]);
    }//GEN-LAST:event_query8_LabelMouseClicked

    private void query8_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query8_LabelMouseEntered
        query8_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query8_LabelMouseEntered

    private void query9_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query9_LabelMouseClicked
        input_Area.setText(SAMPLE[8]);
    }//GEN-LAST:event_query9_LabelMouseClicked

    private void query9_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query9_LabelMouseEntered
        query9_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query9_LabelMouseEntered

    private void query10_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query10_LabelMouseClicked
        input_Area.setText(SAMPLE[9]);
    }//GEN-LAST:event_query10_LabelMouseClicked

    private void query10_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query10_LabelMouseEntered
        query10_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query10_LabelMouseEntered

    private void query11_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query11_LabelMouseClicked
        input_Area.setText(SAMPLE[10]);
    }//GEN-LAST:event_query11_LabelMouseClicked

    private void query11_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query11_LabelMouseEntered
        query11_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query11_LabelMouseEntered

    private void query12_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query12_LabelMouseClicked
        input_Area.setText(SAMPLE[11]);
    }//GEN-LAST:event_query12_LabelMouseClicked

    private void query12_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query12_LabelMouseEntered
        query12_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query12_LabelMouseEntered

    private void query13_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query13_LabelMouseClicked
        input_Area.setText(SAMPLE[12]);
    }//GEN-LAST:event_query13_LabelMouseClicked

    private void query13_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query13_LabelMouseEntered
        query13_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query13_LabelMouseEntered

    private void query14_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query14_LabelMouseClicked
       input_Area.setText(SAMPLE[13]);
    }//GEN-LAST:event_query14_LabelMouseClicked

    private void query14_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query14_LabelMouseEntered
        query14_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query14_LabelMouseEntered

    private void query15_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query15_LabelMouseClicked
        input_Area.setText(SAMPLE[14]);
    }//GEN-LAST:event_query15_LabelMouseClicked

    private void query15_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query15_LabelMouseEntered
        query15_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query15_LabelMouseEntered

    private void query16_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query16_LabelMouseClicked
        input_Area.setText(SAMPLE[15]);
    }//GEN-LAST:event_query16_LabelMouseClicked

    private void query16_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query16_LabelMouseEntered
        query16_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query16_LabelMouseEntered

    private void query17_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query17_LabelMouseClicked
        input_Area.setText(SAMPLE[16]);
    }//GEN-LAST:event_query17_LabelMouseClicked

    private void query17_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query17_LabelMouseEntered
        query17_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query17_LabelMouseEntered

    private void query18_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query18_LabelMouseClicked
        input_Area.setText(SAMPLE[17]);
    }//GEN-LAST:event_query18_LabelMouseClicked

    private void query18_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query18_LabelMouseEntered
        query18_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query18_LabelMouseEntered

    private void query19_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query19_LabelMouseClicked
        input_Area.setText(SAMPLE[18]);
    }//GEN-LAST:event_query19_LabelMouseClicked

    private void query19_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query19_LabelMouseEntered
        query19_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query19_LabelMouseEntered

    private void query20_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query20_LabelMouseClicked
        input_Area.setText(SAMPLE[19]);
    }//GEN-LAST:event_query20_LabelMouseClicked

    private void query20_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query20_LabelMouseEntered
        query20_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query20_LabelMouseEntered

    private void query21_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query21_LabelMouseClicked
        input_Area.setText(SAMPLE[20]);
    }//GEN-LAST:event_query21_LabelMouseClicked

    private void query21_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query21_LabelMouseEntered
        query21_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query21_LabelMouseEntered

    private void query22_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query22_LabelMouseClicked
        input_Area.setText(SAMPLE[21]);
    }//GEN-LAST:event_query22_LabelMouseClicked

    private void query22_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_query22_LabelMouseEntered
        query22_Label.setCursor(Cursor.getPredefinedCursor((Cursor.HAND_CURSOR)));
    }//GEN-LAST:event_query22_LabelMouseEntered

    /* 
     * Purpose : Setting node functions
     *  Author : mwJeong
    */
    public void Node_setting() {
        for (int i = 0; i < dbms.length; i++) {
            nodes[i] = new IconNode(dbms[i]);
        }
        
        for (int i = 0; i < LEAF_NODE_COUNT; i++) {
            lists[i] = new IconList();
        }
        
        nodes[0].add(nodes[RDBMS]);
        for (int i = RDBMS_START; i <= RDBMS_END; i++) {
            nodes[RDBMS].add(nodes[i]);
        }
        
        nodes[0].add(nodes[GPU_BASED]);
        for (int i = GPU_BASED_START; i <= GPU_BASED_END; i++) {
            nodes[GPU_BASED].add(nodes[i]);
        }
        
        nodes[0].setIcon(new ImageIcon(getClass().getResource("/Image/dbmsNode.png")));
        nodes[0].setIconName("Data-Intensive Systems");
        nodes[2].setIcon(new ImageIcon(getClass().getResource("/Image/MySQLNode.png")));
        nodes[2].setIconName("MySQL");
        nodes[3].setIcon(new ImageIcon(getClass().getResource("/Image/MSSQLServerNode.png")));
        nodes[3].setIconName("MSSQL Server");
        nodes[4].setIcon(new ImageIcon(getClass().getResource("/Image/oracleNode.png")));
        nodes[4].setIconName("Oracle");
        nodes[6].setIcon(new ImageIcon(getClass().getResource("/Image/MapDNode.png")));
        nodes[6].setIconName("MapD");
        nodes[7].setIcon(new ImageIcon(getClass().getResource("/Image/postgreNode.png")));
        nodes[7].setIconName("PostgreSQL");
        
        lists[0].setIcon(new ImageIcon(getClass().getResource("/Image/MySQLNode.png")));
        lists[0].setValue("MySQL");
        lists[1].setIcon(new ImageIcon(getClass().getResource("/Image/MSSQLServerNode.png")));
        lists[1].setValue("MSSQL Server");
        lists[2].setIcon(new ImageIcon(getClass().getResource("/Image/oracleNode.png")));
        lists[2].setValue("Oracle");
        lists[3].setIcon(new ImageIcon(getClass().getResource("/Image/MapDNode.png")));
        lists[3].setValue("MapD");
        lists[4].setIcon(new ImageIcon(getClass().getResource("/Image/postgreNode.png")));
        lists[4].setValue("PostgreSQL");
    }
    
    public Icon findIcon(String name) {
        for (int i = 0; i < nodes.length; i++) {
            if (nodes[i].getIconName() == null) {
                continue;
            } else if (nodes[i].getIconName().equals(name)) {
                return nodes[i].getIcon();
            }
        }

        return null;
    }
    
    private Hashtable makeIcons() {
        Hashtable icons = new Hashtable();
        icons.put("Data-Intensive Systems", getClass().getResource("/Image/dbmsNode.png"));
        icons.put("MySQL", getClass().getResource("/Image/dbmsNode.png"));
        icons.put("MSSQL Server", getClass().getResource("/Image/MSSQLServerNode.png"));
        icons.put("Oracle", getClass().getResource("/Image/oracleNode.png"));
        icons.put("MapD", getClass().getResource("/Image/MapDNode.png"));
        icons.put("PostgreSQL", getClass().getResource("/Image/postgreNode.png"));
        return icons;
    }
    
    public Image iconToImage(Icon icon) {
        if (icon instanceof ImageIcon) {
            return ((ImageIcon) icon).getImage();
        } else {
            int w = icon.getIconWidth();
            int h = icon.getIconHeight();
            GraphicsEnvironment ge
                    = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice gd = ge.getDefaultScreenDevice();
            GraphicsConfiguration gc = gd.getDefaultConfiguration();
            BufferedImage image = gc.createCompatibleImage(w, h);
            Graphics2D g = image.createGraphics();
            icon.paintIcon(null, g, 0, 0);
            g.dispose();
            return image;
        }
    }

    /*
     * Purpose : Selection DB functions
     *  Author : mwJeong
    */
    
    private void add_selected(Object node) {
        boolean is_include = false;
        
        for (int i = 0; i < SELECTED_IDX; i++) {
            if (selected_model.elementAt(i).toString().equals(node.toString())) {
                is_include = true;
                break;
            }
        }
        
        if (!is_include) {
            for (int i = 0; i < LEAF_NODE_COUNT; i++) {
                if (lists[i].getValue().equals(node.toString())) {
                    selected_model.addElement(lists[i]);
                    SELECTED_IDX++;
                    break;
                }
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel back_Panel;
    private javax.swing.JTree db_Tree;
    private javax.swing.JTextArea input_Area;
    private javax.swing.JPanel input_Panel;
    private javax.swing.JScrollPane input_Scroll;
    private javax.swing.JLabel input_title_Label;
    private javax.swing.JPanel input_title_Panel;
    private javax.swing.JCheckBox query10_Check;
    private javax.swing.JLabel query10_Label;
    private javax.swing.JCheckBox query11_Check;
    private javax.swing.JLabel query11_Label;
    private javax.swing.JCheckBox query12_Check;
    private javax.swing.JLabel query12_Label;
    private javax.swing.JCheckBox query13_Check;
    private javax.swing.JLabel query13_Label;
    private javax.swing.JCheckBox query14_Check;
    private javax.swing.JLabel query14_Label;
    private javax.swing.JCheckBox query15_Check;
    private javax.swing.JLabel query15_Label;
    private javax.swing.JCheckBox query16_Check;
    private javax.swing.JLabel query16_Label;
    private javax.swing.JCheckBox query17_Check;
    private javax.swing.JLabel query17_Label;
    private javax.swing.JCheckBox query18_Check;
    private javax.swing.JLabel query18_Label;
    private javax.swing.JCheckBox query19_Check;
    private javax.swing.JLabel query19_Label;
    private javax.swing.JCheckBox query1_Check;
    private javax.swing.JLabel query1_Label;
    private javax.swing.JCheckBox query20_Check;
    private javax.swing.JLabel query20_Label;
    private javax.swing.JCheckBox query21_Check;
    private javax.swing.JLabel query21_Label;
    private javax.swing.JCheckBox query22_Check;
    private javax.swing.JLabel query22_Label;
    private javax.swing.JCheckBox query2_Check;
    private javax.swing.JLabel query2_Label;
    private javax.swing.JCheckBox query3_Check;
    private javax.swing.JLabel query3_Label;
    private javax.swing.JCheckBox query4_Check;
    private javax.swing.JLabel query4_Label;
    private javax.swing.JCheckBox query5_Check;
    private javax.swing.JLabel query5_Label;
    private javax.swing.JCheckBox query6_Check;
    private javax.swing.JLabel query6_Label;
    private javax.swing.JCheckBox query7_Check;
    private javax.swing.JLabel query7_Label;
    private javax.swing.JCheckBox query8_Check;
    private javax.swing.JLabel query8_Label;
    private javax.swing.JCheckBox query9_Check;
    private javax.swing.JLabel query9_Label;
    private javax.swing.JPanel sample_Panel;
    private javax.swing.JScrollPane sample_Scroll;
    private javax.swing.JPanel sample_choose_Panel;
    private javax.swing.JLabel sample_title_Label;
    private javax.swing.JPanel sample_title_Panel;
    private javax.swing.JPanel select_Panel;
    private javax.swing.JScrollPane select_Scroll;
    private javax.swing.JCheckBox select_all_Check;
    private javax.swing.JLabel select_all_Label;
    private javax.swing.JPanel select_title_Panel;
    public javax.swing.JList<String> selected_List;
    private javax.swing.JScrollPane selected_Scroll;
    private javax.swing.JLabel selet_title_Label;
    public javax.swing.JTextArea status_Area;
    private javax.swing.JScrollPane status_Scroll;
    private javax.swing.JButton text_load_Btn;
    private javax.swing.JLabel title_Label;
    private javax.swing.JPanel title_Panel;
    // End of variables declaration//GEN-END:variables
}
